AWSTemplateFormatVersion: '2010-09-09'
Resources:
  MSKAccessRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ecs-tasks.amazonaws.com" 
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "AllowMSKAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "kafka-cluster:Connect"
                  - "kafka-cluster:DescribeCluster"
                  - "kafka-cluster:AlterCluster"
                  - "kafka-cluster:DescribeClusterOperation"
                  - "kafka-cluster:DescribeTopic"
                  - "kafka-cluster:CreateTopic"
                  - "kafka-cluster:WriteData"
                  - "kafka-cluster:ReadData"
                Resource:
                  - !Sub "arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:cluster/${MSKServerlessCluster}"
                  - !Sub "arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:topic/${MSKServerlessCluster}/*"

  MSKAccessPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: "MSKAccessPolicy"
      Roles:
        - !Ref MSKAccessRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "kafka-cluster:Connect"
              - "kafka-cluster:DescribeCluster"
              - "kafka-cluster:DescribeTopic"
              - "kafka-cluster:WriteData"
              - "kafka-cluster:ReadData"
            Resource:
              - !Sub "arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:cluster/${MSKServerlessCluster}"
              - !Sub "arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:topic/${MSKServerlessCluster}/*"
  MSKVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MSKServerlessVPC

  MSKSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MSKVPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: MSKServerlessSubnet1

  MSKSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MSKVPC
      CidrBlock: '10.0.2.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: MSKServerlessSubnet2

  MSKSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow traffic for MSK
      VpcId: !Ref MSKVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 9092
          ToPort: 9092
          CidrIp: 0.0.0.0/0 # For testing only
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: MSKServerlessSecurityGroup

  MSKServerlessCluster:
    Type: 'AWS::MSK::ServerlessCluster'
    Properties:
      ClusterName: "ServerlessMSKCluster"
      ClientAuthentication:
        Sasl:
          Iam: 
            Enabled: true
      VpcConfigs:
        - SubnetIds:
            - !Ref MSKSubnet1
            - !Ref MSKSubnet2
          SecurityGroups:
            - !Ref MSKSecurityGroup


Outputs:
  VpcId:
    Description: "MSK VPC ID"
    Value: !Ref MSKVPC

  Subnet1Id:
    Description: "Subnet 1 ID"
    Value: !Ref MSKSubnet1

  Subnet2Id:
    Description: "Subnet 2 ID"
    Value: !Ref MSKSubnet2

  SecurityGroupId:
    Description: "MSK Security Group ID"
    Value: !Ref MSKSecurityGroup

  MSKServerlessClusterArn:
    Description: "ARN of the MSK Serverless Cluster"
    Value: !GetAtt MSKServerlessCluster.Arn

  MSKAccessRoleArn:
    Description: "ARN of the IAM Role for MSK Access"
    Value: !GetAtt MSKAccessRole.Arn
